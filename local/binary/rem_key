#!/system/bin/sh

#clear
key_r() {
	file="$1"
	file_key="$2"

	out_extract_key=/data/local/UnpackerSystem

	if busybox test -s "$file"; then

		echo
		echo ".....Заменяем ключ..."
		echo

		r="$(busybox basename $file)"

		f_name=${r%.*}

		offset_avb="$(bin_utils foffset "$file" "41564230" -1 true)"

		if busybox test ! -z "$offset_avb"; then

			size_magic="$(avbtool info_image --image "$file" | busybox awk '/Header Block:/ { print $3 }')"

			size_ayten="$(avbtool info_image --image "$file" | busybox awk '/Authentication Block:/ { print $3 }')"

			xxx="$(busybox expr "$offset_avb" \+ 64)"

			offset_key="$(busybox printf "%d\n" "0x""$(xxd -ps -s "$xxx" -l 8 "$file")")"

			xxx="$(busybox expr "$offset_avb" \+ 72)"

			size_key="$(busybox printf "%d\n" "0x""$(xxd -ps -s "$xxx" -l 8 "$file")")"

			size_new_key="$(busybox stat -c %s "$file_key")"
			real_offset_key_dec="$(busybox expr "$offset_avb" \+ "$size_magic" \+ "$size_ayten" \+ "$offset_key")"

			real_offset_key="$(printf "%x\n" "$real_offset_key_dec")"

			real_size_key="$(busybox expr "$real_offset_key_dec" \+ "$size_key")"

			if busybox test "$size_key" == "$size_new_key"; then

				sha11="$(avbtool info_image --image "$file" | busybox awk '/^Public key \(sha1\):/ { print $4}')"

				bin_utils writekey "$file" "$real_offset_key" -f "$file_key" &>/dev/null

				if [ $(echo $?) -eq 0 ]; then
					check_new_alg="$(avbtool info_image --image "$file" 2>/dev/null | busybox awk '/^Algorithm:/ { print $2 }')"

					sha12="$(avbtool info_image --image "$file" | busybox awk '/^Public key \(sha1\):/ { print $4}')"

					if [ ! -z "$sha11" -a ! -z "$sha12" ]; then
						echo ".....В файле "$file" успешно заменён ключ на $file_key"
						echo
						echo ".....Algorithm: $check_new_alg"
						echo ".....Old sha1 public key: $sha11"
						echo ".....New sha1 public key: $sha12"
						echo
					else
						echo ".....Ошибка при изменении ключа!"
						echo
					fi
				else
					echo ".....Ошибка при изменении ключа!"
					echo
				fi
			else
				echo
				echo ".....Ошибка! Размеры ключей не совпадают!"
				echo
			fi
		else
			echo
			echo ".....Ошибка, не найден offset AVB0"
			echo
		fi
	else
		echo
		echo ".....Нет файла для обработки!"
		echo
	fi
	busybox rm -f "$out_extract_key"/avb.img
	return
}

search_key() {
	#clear
	echo
	echo ".....Алгоритм: $check_alg"
	echo
	echo ".....Перейдите в папку где находится публичный ключ для замены, например: cd /sdcard"
	read b && $b
	if [ $(echo $?) -eq 0 ]; then
		clear
		nd=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')
		echo
		echo ".....Поиск ключей..."

		v=$(for a in $(busybox find -maxdepth 1 -size -8k -type f); do

			if [ ! -z "$(busybox hexdump -C -n 4 "$a" | busybox grep -wo "00 00 08 00")" -a "$check_alg" == "SHA256_RSA2048" ]; then
				echo "$a"
			elif [ ! -z "$(busybox hexdump -C -n 4 "$a" | busybox grep -wo "00 00 10 00")" -a "$check_alg" == "SHA256_RSA4096" ]; then
				echo "$a"
			elif [ ! -z "$(busybox hexdump -C -n 4 "$a" | busybox grep -wo "00 00 20 00")" -a "$check_alg" == "SHA256_RSA8192" ]; then

				echo "$a"

			fi
		done)

		set -- $v

		if [ ! -z "$v" ]; then
			clear
			echo
			echo ".....Алгоритм: $check_alg"
			echo
			echo ".....Выберите ключ:"
			echo
			select menu in $v "Выход в главное меню"; do
				case $REPLY in
				[1-9]*)
					i="$#"
					j="$#"
					let i=i+1
					let j=j+2
					file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
					if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
						clear
						name_key="$(echo "$file" | busybox sed 's!^\./!!')"
						file_key=/"$nd"/"$name_key"

						key_r "$file_real" "$file_key"
						return
						break
					elif [ "$REPLY" == "$i" ]; then
						clear
						#main_menu
						return
						break
					else
						clear
						echo
						echo "      Вводите цифры, соответствующие меню."
						search_key
						return
						break
					fi
					break
					;;
				*)
					clear
					echo
					echo "      Вводите цифры, соответствующие меню."
					search_key
					return
					break
					;;
				esac
			done
		else
			clear
			echo
			echo ....."В папке \"/$nd\" нет подходящих ключей для замены."
			echo
			return
		fi
		echo
	else
		echo
		echo ".....error: Ошибка перехода в директорию!"
		echo
		echo ".....Введите директорию правильно!"
		echo
		search_key
		return
	fi
	return
}

sel_img() {
	#clear
	echo
	echo "         Замена публичного ключа     "

	echo
	echo "..Перейдите в папку где находится файл \".img\" для замены, например: cd /sdcard"
	read b && $b
	if [ $(echo $?) -eq 0 ]; then
		clear
		nds=$(echo $b | busybox awk '{ print $2 }' | busybox sed 's!^/!!')
		echo
		echo ".....Поиск файлов..."

		v=$(for a in $(busybox find . -maxdepth 1 -name '*.img' -type f | busybox sed 's!./!!'); do
			echo "$a"
		done)

		set -- $v

		if [ ! -z "$v" ]; then
			clear
			echo
			echo ".....Выберите файл:"
			echo
			select menu in $v "Выход в главное меню" "Завершение работы"; do
				case $REPLY in
				[1-9]*)
					i="$#"
					j="$#"
					let i=i+1
					let j=j+2
					file=$(echo "$@" | busybox cut -d' ' -f"$REPLY")
					if [ ! -z "$file" -a "$REPLY" -lt "$i" ]; then
						clear
						file=/"$nds"/"$file"
						file_real="$file"
						avb_dir=/data/local/UnpackerSystem
						if busybox test "$(avbtool info_image --image "$file" 2>/dev/null)"; then

							avbtool info_image --image "$file" >"$avb_dir"/avb.img

							unset check_alg

							check_alg="$(busybox cat "$avb_dir"/avb.img 2>/dev/null | busybox awk '/^Algorithm:/ { print $2 }')"
							if busybox test "$check_alg" != "NONE" -a ! -z "$check_alg"; then

								#fi
								search_key
							else
								echo
								echo ".....Файл: $file не подписан!"
								echo
							fi
						else
							echo
							echo ".....Файл: $file не имеет структуры AVB!"
							echo
						fi
						busybox rm -f /data/local/UnpackerSystem/avb.img
						main_menu
						return
						break
					elif [ "$REPLY" == "$i" ]; then
						clear
						main_menu
						return
						break
					elif [ "$REPLY" == "$j" ]; then
						clear
						return
						break
					else
						clear
						echo
						echo "      Вводите цифры, соответствующие меню."
						sel_img
						return
						break
					fi
					break
					;;
				*)
					clear
					echo
					echo "      Вводите цифры, соответствующие меню."
					sel_img
					return
					break
					;;
				esac
			done
		else
			clear
			echo
			echo ....."В папке \"/$nd\" нет файлов \".img\" для обработки."
			echo
			main_menu
			return
		fi
		echo
	else
		echo
		echo ".....error: Ошибка перехода в директорию!"
		echo
		echo ".....Введите директорию правильно!"
		echo
		sel_img
		return
	fi
	return
}
sel_img

busybox rm -f "$out_extract_key"/avb.img
unset xxx
